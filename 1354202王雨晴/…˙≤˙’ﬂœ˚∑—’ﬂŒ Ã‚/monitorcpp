#include "stdafx.h"
#include "Monitor.h"
Monitor: Monitor(){
	buffer = new int[20];
	count=0;
	nextin=0;
	nextout=0;
	NUM=0;

	notempty =CreateSemaphore(NULL,0,1,"notem");
	notfull =CreateSemaphore(NULL,20,20,"notfu");
	control =CreateSemaphore(NULL,1,1,"ct");

}

Monitor: ~Monitor(){
	CloseHandle(notfull);
	CloseHandle(notempty);
	CloseHandle(control);
}

void Monitor::Append(int x){
    long id=GetCurrentThreadId();
	static p_count = 1;
	int p = p_count++;
	while(1){
	P(notfull);
	P(control);
	buffer[nextin]=x;
	printf("缓冲区，当前，线程id");
	printf(buffer);
	printf(x);
	printf(id);
	nextin=(nextin+1)%bufferlength;
	count++;
	Wait(p,1,3,"producers started producing");
	Wait(p,1,3,"producers finished");
	V(control);
	V(notempty);
	
	}
}

//从缓冲区中读数据，获得notempty和control信号量。完成读操作后对control和notfull信号量作相应的修改
void Monitor::Take(){
    long id=GetCurrentThreadId();
	static c_count=1;
	int c=c_count++;
	while(1){
	P(notempty);
	P(control);
	int x;
	x=buffer[nextout];
	printf("缓冲区，当前，线程id");
	printf(buffer);
	printf(x);
	printf(id);
	nextout=(nextout+1)%bufferlength;
	count--;
	Wait(c,1,2,"consumers started consuming");
	Wait(c,1,2,"consumers finished");
	V(control);
	V(notfull);

	}

}

void Monitor:: Wait(int NUM, int min, int max,LPCSTR info){

  char s_out[128];
  const int BASETIME =500;
  int wait_time=0;
  if(max==min) wait_time = min*BASETIME;
  else wait_time = rand()%(max*BASETIME-min*BASETIME)+min*BASETIME;
  sprintf(s_out,"No%d%s\n",NUM,info);
  printf(s_out);	
  Sleep(wait_time);
}